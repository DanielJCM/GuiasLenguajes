#### Guía de comandos en Linux by dM ####

********************************************
**Probados en: Debian GNU/Linux 7 (wheezy)**
********************************************

Crtl + h // Mostrar archivos ocultos de un directorio de manera grafica

cat /etc/issue.net  //Para saber la versión de SO que tenemos, probado en Debian.  

lsb_release -a //También tenemos un comando que nos va a dar muchos más detalles 

uname // Muestra información del sistema

uname -a // Ver mi version de Kernel, recomendable la otra

uname -mrs // Saber mi version de Kernel especifica, recomendada

cat /etc/*-release // Ver info del sistema (Probado en Debian GNU/Linux 7 wheezy)

who // Muestra usuarios conectados a nuestra máquina, tambien usado para ver las conexiones entrantes de un servidor

Ejemplo:
user tty7         2015-07-28 08:47 (:0)
user pts/0        2015-07-30 14:03 (:0.0)
user pts/1        2015-07-30 17:03 (:0.0)
user pts/2        2015-07-31 14:15 (:0.0)
user pts/3        2015-07-31 12:37 (:0.0)

//En este caso son los usuarios conectados a mi máquina, eso quiere decir que tengo shells
abiertos, por lo tanto todos son representados como usuarios, entre los diversos parametros
se puede apreciar la fecha y la hora en que se abrio el shell, en un servidor seria
el momento en que se conecto el usuario

whoami // Muestra que usuario soy, nombre de usuario

who am i // Nos dira cual usuario somos, si navegamos por los shells abiertos y ejecutamos el comando nos dira cual usuario es

who -u //Ver usuarios conectados

// Ejemplo:

cenditel tty7         2015-07-28 08:47  antig       4257 (:0)
cenditel pts/0        2015-07-30 14:03 03:22        8351 (:0.0)
cenditel pts/1        2015-07-30 17:03 03:19        8351 (:0.0)
cenditel pts/2        2015-07-31 14:15 00:08        8351 (:0.0)
cenditel pts/3        2015-07-31 12:37 02:53        8351 (:0.0)

last // listar los ultimos usuarios conectados

clear // Limpia la pantalla

date // Muestra la fecha

man // Muestra ayuda sobre el comando que pongas a continuación

cal // Muestra un calendario

pwd // Muestra la ruta en la que te encuentras

ls // Muestra lo que hay en la carpeta en la que te encuentras

ls -l // Muestra los archivos, fecha, permisos, etc

ls -la // Muestra los archivos, los ocultos tambien, fecha, permisos, etc

ls -1 // Muestra los archivos en forma de lista

\du // Para ver la lista de carpetas y sub carpetas, los directorios que existen 
dentro de donde se encuentre situado

cd // Cambiar de directorio

mkdir // Crear carpeta

touch // Crear fichero

nano nombre_fichero // Modificar un fichero con el editor nano.

man nano // Leer el manual del editor de textos nano, muy útil, práctico y fácil de usar

cat nombre_fichero // Mostrar contenido de un fichero

less nombre_fichero // Mostrar el contenido de un archivo, mayor movilidad que cat.

Ctrl + D // En el shell, cerrar sesion, salir del root, de maquinas virtuales o de sesiones de usuarios iniciadas

Ctrl + flecha derecha o izquierda // Moverse en el prompt palabra a palabra, no letra por letra.

top  // Listar los procesos de ejecución del sistema (y más cosas) en tiempo real, es una de las herramientas más importantes para un administrador.

// Cada proceso tiene un identificador (PID), entonces podemos matar ese proceso con:

kill -9 xxxx // Matar un proceso donde xxxx es el identificador del proceso.

##########################
########## Less ##########
##########################

// less es un visualizador de archivos de texto que funciona en intérpretes de comando.
// A diferencia de otros programas similares (como more), less permite una completa navegación
// por el contenido del archivo, utilizando un mínino de recursos del sistema.

***** Comandos basicos *****

man less // Manual de less

AvPag // Avanzar una página

RePag // Retroceder una página

space // Tecla espacio para avanzar, como page up

:q // Salir

:h // Ayuda

:/palabra // (/) Buscamos una palabra dentro del documento
// (n) para ir a la siguiente coincidencia.
// (N) para ir a la coincidencia anterior

:G // Ir al final del texto

:g // Ir al inicio del texto

:v //Incocar un editor de texto para el documento, por lo general usa vi pero puede usar nano automaticamente

**********

cp // Copiar un fichero o carpeta

cp -r // Copiar un fichero o carpeta

cp Nombre_de_archivo.txt /Carpeta/destino/a/copiar // Se debe estar situado en la carpeta del archivo a copiar

cp Nombre_carpeta -r /Carpeta/destino/a/copiar // Se debe estar situado en la carpeta de la carpeta a copiar

cp -r /home/usuario/carpeta1/ /home/usuario/carpeta2/ //Se pueden copiar archivos o carpetas especificando las
rutas completas, en este caso la primera ruta es el directorio o archivo a copiar y la segunda es la ruta donde
se va a pegar lo copiado, ambas rutas separadas por un espacio en blanco.

mv // Mover un fichero o carpeta y/o cambiar su nombre

mv /home/carpeta/archivo1.txt /home/carpeta2/ // Mover una carpeta o archivo especificando el directorio
de salida y el de llegada

mv archivo1.txt archivo2.txt // Renombrar un archivo o carpeta 

rmdir // Borrar una carpeta

rm // Borrar un fichero

rm -r /directorio // Para borrar una carpeta, se le da la ruta del directorio a borrar

sudo -i // Pedir contraseña root, algunas versiones basadas en Debian

su // Pedir contraseña del root

root@debian:/home/user# Ctrl + d //Para salir del root, tambien exit, funciona en algunas consolas como python, ruby, entre otras.

Ctrl + R // En la consola, para hacer una busqueda de comandos usados baasndose en la palabra que se introduzca

Shift + Page up <--> Page down // Moverse a traves de los logs de la consola, simula el scroll up/down del mouse

####################################
##### Editor de texto VI o VIM #####
####################################

// Es un editor de texto poderoso, muy usado en la comunidad de desarrolladores de Software Libre para escribir scripts, modificar ficheros
de texto en el shell, programar etc. No posee botones y todas sus funcionalidades se usan a traves de comandos.
Por lo general viene preinstalado en la mayoria de distribuciones, si no es así solo basta con un:

apt-get install vim // con apt-get

aptitude install vim // con aptitude

----------------

--- Modos de uso ---

// Al entrar a VIM para editar un fichero por primera vez, estamos en modo de comandos, quiere decir que no podemos editar el texto
sino que solo podremos usar comandos.

vim // Abrir vim, un fichero en blanco sin nombre ni contenido

i // Tecleamos i para entrar en modo de edicion, podemos insertar texto

escape // Pulsamos la tecla escape para salir del modo edicion o de cualquier otro modo, y volvemos al modo comandos.

:q // En modo comandos escribimos :q para salir del editor sin guardar

:q! // Salir del editor sin guardar ni pedir confirmacion

:w nombre_fichero.xxx //Guardamos un fichero nuevo, le asignamos el nombre y la extension si es necesario.

vim nombre_archivo.xxx // Nos aparecerá una ventana en negro, donde nos aparecerá el contenido del fichero o en negro si está vacío
// En la parte inferior, nos aparecerán los mensajes o comandos que escribamos para manejar el editor, así como la línea en la que estamos, porcentaje del fichero, etc.

:wq! // Guardar y salir, esta accion aplica a un fichero ya creado, que estemos editando.

:syntax on // Sirve para dar color al codigo que estemos editando, VIM reconoce la sintaxis de muchos lenguajes y
la resalta en colores como muchos otros editores graficos como gedit, sublime, ninja, komodo, Geany.

##############################################
########## Cambiar el pass del root ##########
##############################################

su: ****** // Acceder como root
passwd // Nos pedira que introduzcamos la nueva contraseña y la confirmacion para cambiar la clave de root

root@debian:/home/user# passwd
Introduzca la nueva contraseña de UNIX: ****** 
Vuelva a escribir la nueva contraseña de UNIX: ***** 
passwd: contraseña actualizada correctamente
root@debian:/home/user#

#########################################################
########## Instalacion de programas y paquetes ##########
#########################################################

sudo apt-get install Nombre_Paquete // Instalar paquetes

sudo aptitude install Nombre_Paquete // Instalar paquetes, otra forma

aptitude install -s Nombre_Paquete // Hace una simulacion de la instalacion, podemos ver que procesos haría la instalación

apt-get install -s Nombre_Paquete // Simulacion de instalacion con  apt-get install

sudo aptitude search Nombre_Paquete // Realizar una busqueda en los repositorios del paquete que se quiere encontrar

aptitude show Nombre_Paguete // Para ver la informacion del paquete, version, estado, tamaño, conflictos, etc.

aptitude remove Nombre_paquete // Elimina o Desinstala el paquete

aptitude purge Nombre_Paquete //Elimina el paquete y sus archivos de configuracion

----------

diff /home/user/file.html /home/user/file2.html // Permite hacer una comparacion de dos archivos para apreciar sus diferencias
se debe especificar la ruta de ambos archivos y separarlos con un espacio.

########################################
########## Comprimir archivos ##########
########################################

tar -cvf paquete.tar /home/user/carpeta // Le damos los parametros de compresion, asi como el nombre del paquete
y la ruta de lo que queremos que comprima

-c : indica a tar que cree un archivo.
-v : indica a tar que muestre lo que va empaquetando.
-f : indica a tar que el siguiente argumento es el nombre del fichero.tar.

tar -cvf paquete.tar archivo.txt // Creara un paquete con el nombre que le dimos y contiene el archivo.txt 

########## APACHE ##########

sudo apt-get install apache2 // Instalar servidor apache, 127.0.0.1 o LocalHost es para iniciarlo

/var/www/ es la carpeta de los proyectos

chmod -R 777 /var/www/ // Cambiar los permisos de www puesto que solo tiene permisos root, 
-R para que los permisos se hagan de forma recursiva

sudo aptitude search php // Realizar una busqueda en los repositorios del paquete que se quiere encontrar

sudo aptitude install php5 // instalar php5

http://192.xxx.xx.xxx/ //La direccion ip sirve para acceder al directorio del servidor

###############################################
########## Instalar y configurar PHP ##########
###############################################

apt-get install php5 php5-mysql php5-gd libapache2-mod-php5

// Una vez que se hayan descargado e instalado los paquetes de PHP, solo tienes que reiniciar el 
servidor Apache para que el servicio esté disponible. Para hacerlo solo tienes que teclear los siguientes comandos:

/etc/init.d/apache2 restart

// Para probar que tu servicio esta trabajando puedes crear un pequeño archivo y verlo en tu navegador.
// Para hacer esto puedes teclear los siguientes comandos:

nano /var/www/testphp.php

// agrega las lineas siguientes

<?php
// Muestra toda la información, por defecto INFO_ALL
phpinfo();
?>

Para ver este archivo abre tu navegador web y teclea la IP de tu servidor seguido del archivo que acabas de crear, por ejemplo:

http://127.0.0.1/testphp.php //Si aparece la pagina azul pastel de PHP se instalo correctamente

######################################################
########## Instalar y configurar phpMyAdmin ##########
######################################################

aptitude install phpmyadmin // Instalar

http://localhost/phpmyadmin // Acceder al servicio

***After the installation has completed, add phpmyadmin to the apache configuration.**

# sudo nano /etc/apache2/apache2.conf //Agregar en este archivo la configuracion de abajo

***Add the phpmyadmin config to the file.

Include /etc/phpmyadmin/apache.conf //Esta linea se agrega al final de la configuracion del apache para que reconozca el phpMyAdmin

# sudo service apache2 restart // Restart apache para guardar los cambios

/etc/init.d/xxx restart // xxx mysql, apache etc... restart


###########################################
########## Instalar MySQL server ##########
###########################################

apt-get install mysql-server

root@debian:/home/cenditel# aptitude search mysql | grep mysql

# mysql -p //acceder al mysql

########################################################################################
##### Comandos para hacer busquedas en los directorios y en el historial del shell #####
########################################################################################

history | grep xxx //busqueda en el historial de la consola aptitude, ls, l 

grep --color=always -n "mysql" /var/www/prueba/2/datos.php // --color para colorear la palabra a buscar, 
-n para listar la la linea del caracter buscado y al final ra ruta del archivo a buscar

grep cadena_texto ./* -rIn //Busca la cadena de manera recursiva en la carpeta en que se encuentre situado

grep --color=always -n "cadena_texto" ./* -Ir //Busca la cadena de manera recursiva en la carpeta en que se encuentre situado

egrep -r "Saludo" . //Otra forma de busqueda.

history //mostrar el historial de los comandos de la consola

history | grep xxx // Para buscar algun comando usado en el historial del shell, sirve con indicios de alguno usado



whereis python // Para saber donde esta instalado un programa, saber el directorio
whereis firefox
whereis apache2

su:
find / -type f -name NombreArchivo.html // Para mostrar el directorio del archivo que se 
//quiera buscar, se debe saber el nombre del archivo

locate nombre_del_archivo // Hacer una busqueda de un archivo en los directorios, se puede especificar un nombre con su extencion
//o solo especificar una palabra, la busqueda se hara en todos los archivos que contengan la palabra o nombre de archivo escrita.

su: *****
find / -name nombre_carpeta // (/) es para hacer la busqueda desde ahi en adelante, puede ser (/home/user)

find /carpeta // Lista los archivos que componen el directorio introducido

----------

wget -r www.host.com //descargar el contenido de una web, los archivos del directorio
wget -r www.programador-de-software.blogspot.com

###############################
####### Comandos de GIT #######
###############################

// Software de control de versiones diseñado por Linus Torvalds, pensando en la eficiencia
y la confiabilidad del mantenimiento de versiones de aplicaciones cuando éstas tienen un gran número de
archivos de código fuente. Hay algunos proyectos de mucha relevancia que ya usan Git
en particular, el grupo de programación del núcleo Linux.

aptitude install git // fast, scalable, distributed revision control system 

git // Con este comando nos listara la lista de comandos Git que podemos usar en un proyecto

//Lo primero que debemos hacer despues de la instalacion es configurar nuestro Git

git config --global user.name "Argenis Osorio" // Asignamos el nombre de usuario que será la firma del usuario en cada commit

git config --global user.email aosorio@example.com // igualmente el correo que siempre acompañara al autor de cada commit

git init // Crear un directorio, dentro del directorio ejecutar
para crear un nuevo repositorio de git.

git status -s // Lista los archivos del proyecto y se visualiza si fueron agregados al seguimiento de Git.
//Tambien podemos ver si un archivo fue modificado y no a sido agregado al seguimiento de Git

git add * // Para agregar todos los archivos al seguimiento

git status // Muestra el estado actual de la rama, como los cambios que hay sin commitear.

git status -s // Muestra el estado de los archivos del proyecto, si estan sin agregar o fueron modificados

git branch // Lista todas las ramas locales.

git branch -a // Lista todas las ramas locales y remotas.

A  gris.jpg // Agregado
A  principal.html // Agregado
AM principal2.html // Agregado y modificado, se debe agregar otra ver para aceptar los cambios
?? principal3.html // Archivo agregado al directorio pero no agregado al seguimiento de Git

git add Nombre_archivo.xxx // Agregamos el archivo al seguimiento de Git

git rm --cached Nombre_archivo.xxx // Si un archivo fue modificado queda un registro de su nombre anterior en el cache
para borrarlo se esa este comando

git commit -m "Primer commit del proyecto" //Hacer un commit al proyecto, se activara la rama master

git log // Podemos ver todos los commits que se han hehco a un proyecto

git commit --amend -m "comentario commit corregido" // Corregir algun error en el texto del ultimo commit

git reset --hard HEAD~1 // Borrar el ultimo commit hecho.

git checkout -b Nombre_Rama // Crear una rama y cambiarse a ella.

git branch -d Nombre_Rama // Borrar una rama, se debe estar en otra rama para borrarla

git branch -D Nombre_Branch // Forzar el borrado de una rama, a veces no se dejan borrar si hay cambios sin guardar.

git checkout Nombre_Rama // Cambiarse de rama

git branch -v // Para ver los ultimos commits de cada rama.

git checkout XXXXXX123456 // Este comando sirve para moverse entre los commits, cada commit genera una
etiqueta hash, un identificador muy largo alfanumerico, estas etiquetas identifican una version del proyecto
lo que permite restaurar el proyecto a estados anteriores donde XXXXXX123456 representa la etiqueta del commit al que queremos ir.

//Una vez movidos a ese commit especifico del historial se puede crear una nueva rama desde ese punto, si hacemos git log nos mostrara
los commits que habian hasta ese momento y el ultimo es en el que nos encontramos, si queremos volver a tener los commits anteriores 
solo hacemos git checkout a la rama en que estabamos antes o a alguna rama especifica.

git diff // Si se hacen cambios o se agregaron archivos al proyecto este comando nos hará mostrara una comparacion entre los
ultimos cambios hechos el ultimo commit hecho, es recomendable revisar esos cambios antes de agregarlos al seguimiento de git
y por supuesto antes de hacer un commit.

---------

//Luego de hacer el commit en la rama master y luego de haber creado la rama desarrollo y hacer el commit
se pueden listar los commits de las ramas existentes y asi poder realizar comparacaiones entre las
diferentes versiones del codigo. En este caso se agregaron 2 lineas al <div id="cabecera"> de una plantilla del proyecto
//Usando los identificadores de cada commit se pueden comparar las versiones del software.

$ git branch -v
* desarrollo e6dcbf4 Modificacion de texto de la cabecera
  master     a537ef5 Primer commit
cenditel@debian:~/DIV$ git diff a537ef5 e6dcbf4
diff --git a/principal.html b/principal.html
index 554fd4f..94b3eac 100755
--- a/principal.html
+++ b/principal.html
@@ -14,6 +14,8 @@
 
                <div id="cabecera">
                        CabeceraXXX
+                       CabeceraXXX
+                       CabeceraXXX
                </div>  
 
                <div id="cuerpo1">


git clone /home/directorio/proyecto/ //Crea una copia local del repositorio se debe situar en la carpeta
donde se quiere hacer la copia y luego se le da la ruta del proyecto a copiar 

git clone https://xxx.xxx.gob.ve/xxx/xxx/xxx.git // Si esta subido en algun servidor 

---Recomendado---

*Cada desarrollador o equipo de desarrollo puede hacer uso de Git de la forma que le parezca
 conveniente. Sin embargo una buena práctica es la siguiente:

Se deben utilizar 4 tipos de ramas: Master, Development, Features, y Hotfix.

-Master: Es la rama principal. Contiene el repositorio que se encuentra publicado
en producción, por lo que debe estar siempre estable.

-Development: Es una rama sacada de master. Es la rama de integración, todas las nuevas
funcionalidades se deben integrar en esta rama. Luego que se realice la integración y se
 corrijan los errores (en caso de haber alguno), es decir que la rama se encuentre estable,
 se puede hacer un merge de development sobre la rama master.

-Features: Cada nueva funcionalidad se debe realizar en una rama nueva, específica para
esa funcionalidad. Estas se deben sacar de development. Una vez que la funcionalidad
esté pronta, se hace un merge de la rama sobre development, donde
se integrará con las demás funcionalidades.

-Hotfix: Son bugs que surgen en producción, por lo que se deben arreglar y publicar
de forma urgente. Es por ello, que son ramas sacadas de master. Una vez corregido
el error, se debe hacer un merge de la rama sobre master. Al final, para que no
quede desactualizada, se debe realizar el merge de master sobre development.

#############################################
######### Subir proyectos a GitHub ##########
#############################################

// Repositorio: Un repositorio, depósito o archivo es un sitio centralizado donde
se almacena y mantiene información digital, habitualmente bases de datos o archivos informáticos.

1- Crearnos una cuenta en GitHub
2- Crear un repositorio, ese repo tendra una URL asignada, ejem: https://github.com/argenisosorio/GuiasLenguajes
// En este caso (argenisosorio) es el nombre de usuario y (GuiasLenguajes) es el nombre del repositorio
3- Una forma rapida de subir un proyecto de git es bajando ese repositorio creado, que sera donde subiremos nuestro proyecto
// descargamos ese repo con:

git clone https://github.com/Usuario/nombreproyecto.git // Clonamos el repositorio del proyecto

cd nombreproyecto/ //Nos cambiamos a la carpeta del proyecto

4- Una vez hecho es veremos una carpeta local con el nombre de nuestro repositorio de Github
esta carpeta estará vacía porque aun no hemos puesto nada. Ahora puedes meter dentro todos los archivos
nuestro proyecto y cuando los tengas todos dentro puedes ejecutar estos comandos:

git add // Leer seccion de comandos git

git commit -m "Comentario" // Leer seccion de comandos git

git push origin master // Este comando es para subir el proyecto directamente al repo de nuestra cuenta en 
github, cabe mencionar que en el directorio .git descargado, en el archivo config estará por defecto
escrita la URL de nuestro repo lo que facilita subir los proyectos y los cambios directamente, por ello 
el paso de la clonacion del repo.

git push origin --delete your_branch //Eliminar una rama en tu Github o en tu repositorio remoto.

git push origin :your_branch // Eliminar una rama, alternativa al anterior.

// Antes de subir los cambios nos pedira el user y pass de la cuenta github para realizar la autenticacion
cenditel@debian:~/GuiasLenguajes$ git push origin master
Username for 'https://github.com': user
Password for 'https://user@github.com': *****
Counting objects: 14, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (13/13), done.
Writing objects: 100% (13/13), 45.99 KiB, done.
Total 13 (delta 0), reused 0 (delta 0)
To https://github.com/user/proyecto.git
   af47064..228246e  master -> master

//Listo ya deberias porder ver tu proyecto en github

git push origin +master // Para borrar o deshacer un commit en github, se debe primero borrar el commit 
de manera local, luego volvemos a subir el proyecto con este comando para que quede como estaba.

#########################################
########## Terminal Terminator ##########
#########################################

//Gran herramienta para los desarrolladores, permite abrir multiples terminales
y poder ordenarlos, muy personalizable, entre muchas otras cosas. **RECOMENDADO**

Paquete: terminator / multiple GNOME terminals in one window

aptitude install terminator // Para instalarlo
apt-get install terminator

Dentro de Terminator:
Ctrl + Shift + o // Abrir un terminal horizontal y paralelo
Ctrl + Shift + e // Abrir un terminal vertical y paralelo
Alt + flechas // Moverse por los terminales
Ctrl + Shift + w // Cerrar un terminal
Ctrl + Shift + x // Maximizar un terminal, igual para salir
Ctrl + Shift + z // Maximizar un terminal(aumentado), igual para salir
Ctrl + Shift + flechas // Cambiar el tamaño a voluntad de un terminal
Ctrl + (+) // Aumentar tamaño de fuente, el (+) del Qwerty
Ctrl + (-) // Minimizar tamaño de fuente, el (-) del Qwerty 
Ctrl + d // Si no hay sesion de usuario abierta, como root y otros cerrará la pestaña o ventana.

-----------------

################################################
########## Ambiente virtual en Python ##########
################################################

// Cuando se desarrollando software con Python, quizas se presente el problema de tener utilizar diferentes versiones de una mismo paquete en
diferentes proyectos, ya sea el mismo Python o diferentes versiones de un Framework como Django por ejemplo, el problema a solucionar radica
en como poder instalar las dos o mas versiones de la misma librería con el fin de poder desarrollar varios proyectos de forma simultánea.

La solución consiste en crear virtualenvs o entornos virtuales. Un entorno virtual de Python es un espacio completamente independiente
de otros entornos virtuales y de los paquetes instalados globalmente en el sistema. Esto significa que es posible instalar la versión
2.7 de Python en un entorno virtual y la versión 3.0 en otro diferente o de forma global sin problema alguno.

El porder tener diferentes entornos donde podemos instalar diferentes versiones de paquetes nos da la oportunidad de hacer un desarrollo simultaneo
así como poder hacer pruebas si afectar a los paquetes del sistema global.

--Instalación: 

$ aptitude install python−virtualenv virtualenvwrapper // Para crear un ambiente virtual instale las herramientas
python-virtualenv y virtualenvwrapper

$ mkvirtualenv nombre_ambiente_virtual //  Con su usuario (diferente a root) cree un ambiente virtual para su proyecto.

$ workon nombre_ambiente_virtual // Para acceder al nombre del ambiente virtual creado

ejemplo: 
user@debian:/home$ workon proyecto // Accedemos al entorno virtual creado
(proyecto)user@debian:/home$ // Ya estamos en el entorno virtual creado, denotado por el nombre del entorno al inicio del prompt

$ deactivate nombre_ambiente_virtual // Para salir del entorno virtaul, o simplemente deactivate


##############
### Otros: ###
##############

$ export GIT_SSL_NO_VERIFY=True // Si un repostirotio git remoto no cuenta con el certificado
digital del servidor a veces se debe saltar chequeo de la firma para bajar las fuentes con este comando.
